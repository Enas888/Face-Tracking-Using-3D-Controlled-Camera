from flask import Flask, render_template, request, Response
import cv2
import requests
app = Flask(__name__)
cam = cv2.VideoCapture(1)
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
def gen_frames_auto():
i=0
while True:
# read the camera frame
success, frame = cam.read()
if not success:
break
else:
frame = cv2.flip(frame, 1)
(fh, fw) = frame.shape[:2]
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1,
minNeighbors=5, minSize=(30, 30))
for (x,y,w,h) in faces:
cv2.rectangle(frame, (x,y), (x+w, y+h), (0, 255, 0), 2)
# Calculate the center of the face
center_x = x + w // 2
center_y = y + h // 2
if i % 48 == 0:
# Calculate the displacement values based on the change in position
displacement_x = center_x - fw // 2
displacement_y = center_y - fh // 2
if abs(displacement_x)>50:
n = round(displacement_x / 1.77)
pan (n)
print("Auto X "+str(n))
if abs(displacement_y)>50:
n = round(displacement_y / 1.77)
tilt (-n)
print("Auto Y "+str(-n))
i+=1
ret, buffer = cv2.imencode('.jpg', frame)
frame = buffer.tobytes()
# concat frame one by one and show result
yield (b'--frame\r\n'
b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
def gen_frames():
while True:
# read the camera frame
success, frame = cam.read()
if not success:
break
else:
frame = cv2.flip(frame, 1)
ret, buffer = cv2.imencode('.jpg', frame)
frame = buffer.tobytes()
# concat frame one by one and show result
yield (b'--frame\r\n'
b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
@app.route('/video_feed')
def video_feed():
return Response(gen_frames(), mimetype='multipart/x-mixed-replace;
boundary=frame')
@app.route('/video_feed_auto')
def video_feed_auto():
return Response(gen_frames_auto(), mimetype='multipart/x-mixed-replace;
boundary=frame')
@app.route("/", methods=['GET','POST'])
def index():
if request.method == 'GET':
ds = request.args.get('deg', '0', type=str)
pls = request.args.get('pla', '0', type=str)
pl=len(pls)
d=int(ds)
if pls!='0' :
if pl==3:
n = round(d / 0.177)
pan(n)
if pl==4:
n = round(d / 0.177)
tilt(n)
print(n)
return render_template("index.html")
def pan(n):
response =
requests.get('http://192.168.43.94/getValues?value1=tilt&value2='+str(n))
def tilt(n):
response =
requests.get('http://192.168.43.94/getValues?value1=pan&value2='+str(-n))
if __name__== '__main__':
app.run(debug=True,port=8000)
